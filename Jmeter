#!/bin/bash
set -e

# Define colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Project directory
PROJECT_NAME="jmeter-api"
PROJECT_DIR="$(pwd)/$PROJECT_NAME"

echo -e "${YELLOW}Setting up JMeter API project at $PROJECT_DIR${NC}"

# Create project directory structure
mkdir -p "$PROJECT_DIR"
cd "$PROJECT_DIR"

mkdir -p src/main/java/com/loadtest/jmeterapi/controller
mkdir -p src/main/java/com/loadtest/jmeterapi/model
mkdir -p src/main/java/com/loadtest/jmeterapi/service
mkdir -p src/main/resources
mkdir -p jmeter-tests
mkdir -p jmeter-results

echo -e "${GREEN}Created directory structure${NC}"

# Create Dockerfile
cat > Dockerfile << 'EOF'
FROM openjdk:17-slim AS builder

# Install Maven and other required packages
RUN apt-get update && \
    apt-get install -y maven wget unzip && \
    apt-get clean

# Set up JMeter
WORKDIR /opt
RUN apt-get update && \
    apt-get install -y wget unzip && \
    wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.2.tgz -O /tmp/jmeter.tgz && \
    tar -xzf /tmp/jmeter.tgz -C /opt && \
    rm /tmp/jmeter.tgz && \
    ln -s /opt/apache-jmeter-5.6.2/bin/jmeter /usr/local/bin/jmeter

# Set up Spring Boot project
WORKDIR /app
COPY pom.xml . 
COPY src ./src

# Build the Spring Boot application
RUN mvn clean package -DskipTests

# Run the application
FROM openjdk:17-slim

# Install required tools for JMeter and graphical dependencies
RUN apt-get update && \
    apt-get install -y \
    wget unzip \
    # Font and graphics libraries
    fontconfig \
    libfreetype6 \
    # X11 libraries
    libxrender1 \
    libxtst6 \
    libxi6 \
    # Additional required libraries
    libbatik-java \
    libfontbox-java \
    libxml2 \
    # Required for JMeter's SSL
    ca-certificates \
    && apt-get clean

# Set up JMeter in the final image
WORKDIR /opt
RUN apt-get update && \
    apt-get install -y wget unzip && \
    wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.2.tgz -O /tmp/jmeter.tgz && \
    tar -xzf /tmp/jmeter.tgz -C /opt && \
    rm /tmp/jmeter.tgz && \
    ln -s /opt/apache-jmeter-5.6.2/bin/jmeter /usr/local/bin/jmeter

# Create directories for JMeter tests and results
RUN mkdir -p /jmeter/tests /jmeter/results && \
    chmod 777 /jmeter/tests /jmeter/results

# Set environment variables for headless mode
ENV JAVA_TOOL_OPTIONS="-Djava.awt.headless=true"
ENV JVM_ARGS="-Djava.awt.headless=true"

# Copy built application from builder stage
WORKDIR /app
COPY --from=builder /app/target/*.jar app.jar

# Expose the port for the Spring Boot application
EXPOSE 8080

# Start the Spring Boot application
CMD ["java", "-Djava.awt.headless=true", "-jar", "app.jar"]
EOF

echo -e "${GREEN}Created Dockerfile${NC}"

# Create pom.xml
cat > pom.xml << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.5</version>
        <relativePath/>
    </parent>
    
    <groupId>com.loadtest</groupId>
    <artifactId>jmeter-api</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>jmeter-api</name>
    <description>API for JMeter load testing</description>
    
    <properties>
        <java.version>17</java.version>
        <jmeter.version>5.6.2</jmeter.version>
    </properties>
    
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.apache.jmeter</groupId>
            <artifactId>ApacheJMeter_core</artifactId>
            <version>${jmeter.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.jmeter</groupId>
            <artifactId>ApacheJMeter_http</artifactId>
            <version>${jmeter.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
EOF

echo -e "${GREEN}Created pom.xml${NC}"

# Create application main class
cat > src/main/java/com/loadtest/jmeterapi/JmeterApiApplication.java << 'EOF'
package com.loadtest.jmeterapi;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class JmeterApiApplication {
    public static void main(String[] args) {
        SpringApplication.run(JmeterApiApplication.class, args);
    }
}
EOF

echo -e "${GREEN}Created main application class${NC}"

# Create model classes
cat > src/main/java/com/loadtest/jmeterapi/model/LoadTestRequest.java << 'EOF'
package com.loadtest.jmeterapi.model;

import lombok.Data;
import java.util.List;

@Data
public class LoadTestRequest {
    private String testName;
    private String baseUrl;
    private int numUsers;
    private int rampUpPeriod;
    private int loopCount;
    private List<HttpSampler> samplers;
}
EOF

cat > src/main/java/com/loadtest/jmeterapi/model/HttpSampler.java << 'EOF'
package com.loadtest.jmeterapi.model;

import lombok.Data;
import java.util.Map;

@Data
public class HttpSampler {
    private String name;
    private String httpMethod;
    private String path;
    private Map<String, String> headers;
    private Object payload;
}
EOF

cat > src/main/java/com/loadtest/jmeterapi/model/LoadTestResponse.java << 'EOF'
package com.loadtest.jmeterapi.model;

import lombok.Data;

@Data
public class LoadTestResponse {
    private String status;
    private String message;
    private String jmxFilePath;
    private String resultsFilePath;
}
EOF

echo -e "${GREEN}Created model classes${NC}"

# Create controller
cat > src/main/java/com/loadtest/jmeterapi/controller/LoadTestController.java << 'EOF'
package com.loadtest.jmeterapi.controller;

import com.loadtest.jmeterapi.model.LoadTestRequest;
import com.loadtest.jmeterapi.model.LoadTestResponse;
import com.loadtest.jmeterapi.service.JmeterService;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api")
public class LoadTestController {

    private final JmeterService jmeterService;

    @Autowired
    public LoadTestController(JmeterService jmeterService) {
        this.jmeterService = jmeterService;
    }

    @PostMapping("/loadtest")
    public ResponseEntity<LoadTestResponse> createAndRunLoadTest(@Valid @RequestBody LoadTestRequest request) {
        LoadTestResponse response = jmeterService.createAndExecuteTest(request);
        return ResponseEntity.ok(response);
    }

    @GetMapping("/loadtest")
    public ResponseEntity<LoadTestResponse> getLoadTestResults(@RequestParam String testName) {
        LoadTestResponse response = jmeterService.getTestResults(testName);
        return ResponseEntity.ok(response);
    }
}
EOF

echo -e "${GREEN}Created controller${NC}"

# Create service
cat > src/main/java/com/loadtest/jmeterapi/service/JmeterService.java << 'EOF'
package com.loadtest.jmeterapi.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.loadtest.jmeterapi.model.HttpSampler;
import com.loadtest.jmeterapi.model.LoadTestRequest;
import com.loadtest.jmeterapi.model.LoadTestResponse;
import org.apache.jmeter.config.Arguments;
import org.apache.jmeter.config.gui.ArgumentsPanel;
import org.apache.jmeter.control.LoopController;
import org.apache.jmeter.control.gui.LoopControlPanel;
import org.apache.jmeter.control.gui.TestPlanGui;
import org.apache.jmeter.engine.StandardJMeterEngine;
import org.apache.jmeter.protocol.http.control.Header;
import org.apache.jmeter.protocol.http.control.HeaderManager;
import org.apache.jmeter.protocol.http.control.gui.HttpTestSampleGui;
import org.apache.jmeter.protocol.http.gui.HeaderPanel;
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy;
import org.apache.jmeter.reporters.ResultCollector;
import org.apache.jmeter.reporters.Summariser;
import org.apache.jmeter.save.SaveService;
import org.apache.jmeter.testelement.TestElement;
import org.apache.jmeter.testelement.TestPlan;
import org.apache.jmeter.threads.ThreadGroup;
import org.apache.jmeter.threads.gui.ThreadGroupGui;
import org.apache.jmeter.util.JMeterUtils;
import org.apache.jorphan.collections.HashTree;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileOutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Map;

@Service
public class JmeterService {

    private static final Logger logger = LoggerFactory.getLogger(JmeterService.class);
    private final ObjectMapper objectMapper = new ObjectMapper();
    private static final String JMX_DIR = "/jmeter/tests/";
    private static final String RESULTS_DIR = "/jmeter/results/";
    private boolean jmeterInitialized = false;

    public JmeterService() {
        initializeJMeter();
    }
    
    private synchronized void initializeJMeter() {
        if (!jmeterInitialized) {
            try {
                // Initialize JMeter properties
                File jmeterHome = new File("/opt/apache-jmeter-5.6.2");
                if (!jmeterHome.exists()) {
                    logger.error("JMeter home directory not found at: {}", jmeterHome.getPath());
                    throw new RuntimeException("JMeter home directory not found");
                }
                
                String jmeterProperties = jmeterHome.getPath() + "/bin/jmeter.properties";
                File propsFile = new File(jmeterProperties);
                if (!propsFile.exists()) {
                    logger.error("JMeter properties file not found at: {}", jmeterProperties);
                    throw new RuntimeException("JMeter properties file not found");
                }
                
                logger.info("Initializing JMeter with home: {} and properties: {}", jmeterHome.getPath(), jmeterProperties);
                
                JMeterUtils.loadJMeterProperties(jmeterProperties);
                JMeterUtils.setJMeterHome(jmeterHome.getPath());
                JMeterUtils.initLocale();
                
                // Set additional properties to ensure headless operation
                JMeterUtils.setProperty("java.awt.headless", "true");
                
                logger.info("JMeter initialized successfully");
                jmeterInitialized = true;
            } catch (Exception e) {
                logger.error("Failed to initialize JMeter", e);
                throw new RuntimeException("Failed to initialize JMeter", e);
            }
        }
    }

    public LoadTestResponse createAndExecuteTest(LoadTestRequest request) {
        try {
            logger.info("Creating and executing load test: {}", request.getTestName());
            
            // Ensure JMeter is initialized
            if (!jmeterInitialized) {
                initializeJMeter();
            }
            
            // Create directories if they don't exist
            createDirectories();

            // Generate JMX file
            String jmxFilePath = createJmxFile(request);
            logger.info("JMX file created: {}", jmxFilePath);

            // Execute JMeter test
            String resultsFilePath = executeJmeterTest(jmxFilePath, request.getTestName());
            logger.info("Test executed, results saved to: {}", resultsFilePath);

            // Create response
            LoadTestResponse response = new LoadTestResponse();
            response.setStatus("SUCCESS");
            response.setMessage("Load test executed successfully");
            response.setJmxFilePath(jmxFilePath);
            response.setResultsFilePath(resultsFilePath);

            return response;
        } catch (Exception e) {
            logger.error("Error executing load test", e);
            LoadTestResponse response = new LoadTestResponse();
            response.setStatus("ERROR");
            response.setMessage("Error executing load test: " + e.getMessage());
            return response;
        }
    }

    private void createDirectories() {
        try {
            Path jmxPath = Paths.get(JMX_DIR);
            Path resultsPath = Paths.get(RESULTS_DIR);
            
            if (!Files.exists(jmxPath)) {
                Files.createDirectories(jmxPath);
                logger.info("Created JMX directory: {}", JMX_DIR);
            }
            
            if (!Files.exists(resultsPath)) {
                Files.createDirectories(resultsPath);
                logger.info("Created results directory: {}", RESULTS_DIR);
            }
        } catch (Exception e) {
            logger.error("Failed to create directories", e);
            throw new RuntimeException("Failed to create directories", e);
        }
    }

    private String createJmxFile(LoadTestRequest request) {
        try {
            // Create Test Plan
            TestPlan testPlan = new TestPlan(request.getTestName());
            testPlan.setProperty(TestElement.TEST_CLASS, TestPlan.class.getName());
            testPlan.setProperty(TestElement.GUI_CLASS, TestPlanGui.class.getName());
            testPlan.setUserDefinedVariables((Arguments) new ArgumentsPanel().createTestElement());

            // Create Thread Group
            ThreadGroup threadGroup = new ThreadGroup();
            threadGroup.setName("Thread Group");
            threadGroup.setNumThreads(request.getNumUsers());
            threadGroup.setRampUp(request.getRampUpPeriod());
            threadGroup.setSamplerController(createLoopController(request.getLoopCount()));
            threadGroup.setProperty(TestElement.TEST_CLASS, ThreadGroup.class.getName());
            threadGroup.setProperty(TestElement.GUI_CLASS, ThreadGroupGui.class.getName());

            // Create HTTP Samplers
            HashTree testPlanTree = new HashTree();
            HashTree threadGroupHashTree = testPlanTree.add(testPlan);
            HashTree threadGroupTree = threadGroupHashTree.add(threadGroup);

            for (HttpSampler samplerConfig : request.getSamplers()) {
                // Create HTTP Sampler
                HTTPSamplerProxy httpSampler = createHttpSampler(request.getBaseUrl(), samplerConfig);
                logger.debug("Created HTTP sampler: {}", samplerConfig.getName());
                
                // Add Header Manager
                HeaderManager headerManager = createHeaderManager(samplerConfig.getHeaders());
                
                // Add sampler to thread group
                HashTree samplerTree = threadGroupTree.add(httpSampler);
                samplerTree.add(headerManager);
            }

            // Save JMX file
            String jmxFilePath = JMX_DIR + sanitizeFileName(request.getTestName()) + ".jmx";
            SaveService.saveTree(testPlanTree, new FileOutputStream(jmxFilePath));
            logger.info("Saved JMX file to: {}", jmxFilePath);

            return jmxFilePath;
        } catch (Exception e) {
            logger.error("Failed to create JMX file", e);
            throw new RuntimeException("Failed to create JMX file", e);
        }
    }

    private LoopController createLoopController(int loopCount) {
        LoopController loopController = new LoopController();
        loopController.setLoops(loopCount);
        loopController.setFirst(true);
        loopController.setProperty(TestElement.TEST_CLASS, LoopController.class.getName());
        loopController.setProperty(TestElement.GUI_CLASS, LoopControlPanel.class.getName());
        loopController.initialize();
        return loopController;
    }

    private HTTPSamplerProxy createHttpSampler(String baseUrl, HttpSampler samplerConfig) throws Exception {
        HTTPSamplerProxy httpSampler = new HTTPSamplerProxy();
        httpSampler.setDomain(getDomain(baseUrl));
        httpSampler.setPort(getPort(baseUrl));
        httpSampler.setProtocol(getProtocol(baseUrl));
        httpSampler.setPath(samplerConfig.getPath());
        httpSampler.setMethod(samplerConfig.getHttpMethod());
        httpSampler.setName(samplerConfig.getName());
        httpSampler.setProperty(TestElement.TEST_CLASS, HTTPSamplerProxy.class.getName());
        httpSampler.setProperty(TestElement.GUI_CLASS, HttpTestSampleGui.class.getName());
        
        // Set payload for POST requests
        if ("POST".equalsIgnoreCase(samplerConfig.getHttpMethod()) && samplerConfig.getPayload() != null) {
            String jsonPayload = objectMapper.writeValueAsString(samplerConfig.getPayload());
            httpSampler.addNonEncodedArgument("", jsonPayload, "");
            httpSampler.setPostBodyRaw(true);
        }
        
        logger.debug("HTTP Sampler created for: {}://{}{}", 
            getProtocol(baseUrl), getDomain(baseUrl), samplerConfig.getPath());
        
        return httpSampler;
    }

    private HeaderManager createHeaderManager(Map<String, String> headers) {
        HeaderManager headerManager = new HeaderManager();
        headerManager.setProperty(TestElement.TEST_CLASS, HeaderManager.class.getName());
        headerManager.setProperty(TestElement.GUI_CLASS, HeaderPanel.class.getName());
        headerManager.setName("HTTP Header Manager");
        
        if (headers != null) {
            headers.forEach((name, value) -> {
                headerManager.add(new Header(name, value));
                logger.trace("Added header: {} = {}", name, value);
            });
        }
        
        // Add Content-Type header for JSON
        headerManager.add(new Header("Content-Type", "application/json"));
        
        return headerManager;
    }

    private String executeJmeterTest(String jmxFilePath, String testName) {
        try {
            String resultsFilePath = RESULTS_DIR + sanitizeFileName(testName) + "_results.jtl";
            logger.info("Executing JMeter test from: {} with results to: {}", jmxFilePath, resultsFilePath);
            
            // Create summariser
            Summariser summer = null;
            String summariserName = JMeterUtils.getPropDefault("summariser.name", "summary");
            if (summariserName.length() > 0) {
                summer = new Summariser(summariserName);
            }
            
            // Create result collector and configure it
            ResultCollector resultCollector = new ResultCollector(summer);
            resultCollector.setFilename(resultsFilePath);
            
            // Load JMX file
            File jmxFile = new File(jmxFilePath);
            if (!jmxFile.exists()) {
                throw new RuntimeException("JMX file does not exist: " + jmxFilePath);
            }
            
            // Use ProcessBuilder to run JMeter in a separate process
            logger.info("Running JMeter test using ProcessBuilder");
            ProcessBuilder processBuilder = new ProcessBuilder(
                "jmeter", 
                "-n",                    // Non-GUI mode
                "-t", jmxFilePath,       // Test file
                "-l", resultsFilePath,   // Log file
                "-Jjmeter.save.saveservice.output_format=xml"  // Save in XML format
            );
            
            // Redirect error stream to output stream
            processBuilder.redirectErrorStream(true);
            
            // Start the process
            Process process = processBuilder.start();
            
            // Log the output from JMeter
            java.io.BufferedReader reader = new java.io.BufferedReader(
                new java.io.InputStreamReader(process.getInputStream()));
            
            String line;
            while ((line = reader.readLine()) != null) {
                logger.info("JMeter: {}", line);
            }
            
            // Wait for process to complete
            int exitCode = process.waitFor();
            logger.info("JMeter process completed with exit code: {}", exitCode);
            
            if (exitCode != 0) {
                throw new RuntimeException("JMeter execution failed with exit code: " + exitCode);
            }
            
            // Check if results file was created and has content
            File resultsFile = new File(resultsFilePath);
            if (!resultsFile.exists() || resultsFile.length() == 0) {
                logger.error("Results file is empty or does not exist: {}", resultsFilePath);
                throw new RuntimeException("JMeter did not generate results");
            }
            
            logger.info("JMeter test completed successfully");
            return resultsFilePath;
        } catch (Exception e) {
            logger.error("Failed to execute JMeter test", e);
            throw new RuntimeException("Failed to execute JMeter test", e);
        }
    }

    public LoadTestResponse getTestResults(String testName) {
        try {
            String sanitizedName = sanitizeFileName(testName);
            String jmxFilePath = JMX_DIR + sanitizedName + ".jmx";
            String resultsFilePath = RESULTS_DIR + sanitizedName + "_results.jtl";
            
            File jmxFile = new File(jmxFilePath);
            File resultsFile = new File(resultsFilePath);
            
            LoadTestResponse response = new LoadTestResponse();
            
            if (jmxFile.exists() && resultsFile.exists()) {
                response.setStatus("SUCCESS");
                response.setMessage("Load test results found");
                response.setJmxFilePath(jmxFilePath);
                response.setResultsFilePath(resultsFilePath);
            } else {
                response.setStatus("ERROR");
                response.setMessage("Load test results not found for: " + testName);
            }
            
            return response;
        } catch (Exception e) {
            logger.error("Error retrieving test results", e);
            LoadTestResponse response = new LoadTestResponse();
            response.setStatus("ERROR");
            response.setMessage("Error retrieving test results: " + e.getMessage());
            return response;
        }
    }

    // Helper methods
    private String sanitizeFileName(String fileName) {
        return fileName.replaceAll("[^a-zA-Z0-9.-]", "_");
    }
    
    private String getDomain(String url) {
        try {
            return new java.net.URL(url).getHost();
        } catch (Exception e) {
            logger.error("Invalid URL: {}", url, e);
            throw new RuntimeException("Invalid URL: " + url, e);
        }
    }
    
    private int getPort(String url) {
        try {
            int port = new java.net.URL(url).getPort();
            if (port == -1) {
                String protocol = new java.net.URL(url).getProtocol();
                if ("https".equals(protocol)) {
                    return 443;
                } else {
                    return 80;
                }
            }
            return port;
        } catch (Exception e) {
            logger.error("Invalid URL: {}", url, e);
            throw new RuntimeException("Invalid URL: " + url, e);
        }
    }
    
    private String getProtocol(String url) {
        try {
            return new java.net.URL(url).getProtocol();
        } catch (Exception e) {
            logger.error("Invalid URL: {}", url, e);
            throw new RuntimeException("Invalid URL: " + url, e);
        }
    }
}
EOF

echo -e "${GREEN}Created service class${NC}"

# Create application.properties
cat > src/main/resources/application.properties << 'EOF'
# Server port
server.port=8080

# Spring configuration
spring.application.name=jmeter-api

# Logging
logging.level.root=INFO
logging.level.com.loadtest=DEBUG
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# Max file size for uploads
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
EOF

echo -e "${GREEN}Created application.properties${NC}"

# Create build script
cat > build.sh << 'EOF'
#!/bin/bash
set -e

# Build the Docker image
echo "Building Docker image..."
docker build -t jmeter-api .

# Run the Docker container
echo "Starting Docker container..."
docker run -d -p 8080:8080 \
  --name jmeter-api \
  -v "$(pwd)/jmeter-tests:/jmeter/tests" \
  -v "$(pwd)/jmeter-results:/jmeter/results" \
  jmeter-api

echo "JMeter API container is running on port 8080"
EOF

chmod +x build.sh
echo -e "${GREEN}Created build script${NC}"

# Create run-jmeter script
cat > run-jmeter.sh << 'EOF'
#!/bin/bash

# Parameters
JMX_FILE=$1
RESULTS_FILE=$2
THREADS=$3
RAMP_UP=$4
LOOP_COUNT=$5

# Check if parameters are provided
if [ -z "$JMX_FILE" ] || [ -z "$RESULTS_FILE" ]; then
  echo "Usage: $0 <jmx_file> <results_file> [threads] [ramp_up] [loop_count]"
  exit 1
fi

# Set default values
THREADS=${THREADS:-1}
RAMP_UP=${RAMP_UP:-1}
LOOP_COUNT=${LOOP_COUNT:-1}

# Run JMeter test
docker exec jmeter-api jmeter \
  -n \
  -t "$JMX_FILE" \
  -l "$RESULTS_FILE" \
  -Jthreads=$THREADS \
  -Jrampup=$RAMP_UP \
  -Jloops=$LOOP_COUNT \
  -e -o "${RESULTS_FILE%.*}-report"

echo "JMeter test completed. Results saved to $RESULTS_FILE"
EOF

chmod +x run-jmeter.sh
echo -e "${GREEN}Created run-jmeter script${NC}"

# Create a sample test script for quick testing
cat > test-endpoint.sh << 'EOF'
#!/bin/bash

curl -X POST http://localhost:8080/api/loadtest \
  -H "Content-Type: application/json" \
  -d '{
    "testName": "Get Organization Test - Final Fix",
    "baseUrl": "https://rsh.lumenore.com",
    "numUsers": 1,
    "rampUpPeriod": 1,
    "loopCount": 1,
    "samplers": [
      {
        "name": "Get Organization Data",
        "httpMethod": "POST",
        "path": "/api/core/get-organization",
        "headers": {
          "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
          "cookieyes-consent": "consentid:NHdzVDZFdXhmV203Q1NrUmY0enl3aXFnR2dRcE9GN1U,consent:yes,action:yes,necessary:yes,functional:yes,analytics:yes,performance:yes,advertisement:yes,other:yes; resetToken=; isMobileDevice=false",
          "lumenoreuniquecookie": "",
          "origin": "https://rsh.lumenore.com",
          "priority": "u=1, i",
          "referer": "https://rsh.lumenore.com/salesforcedemo/",
          "requestid": "20020fda-404c-46bf-a805-edf615195767",
          "sec-ch-ua": "\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Google Chrome\";v=\"134\"",
          "sec-ch-ua-mobile": "?0",
          "sec-ch-ua-platform": "\"Linux\"",
          "sec-fetch-dest": "empty",
          "sec-fetch-mode": "cors",
          "sec-fetch-site": "same-origin",
          "user-agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"
        },
        "payload": {
          "data": {
            "organizationName": "salesforcedemo"
          }
        }
      }
    ]
  }'
EOF

chmod +x test-endpoint.sh
echo -e "${GREEN}Created test-endpoint script${NC}"

# Create README file
cat > README.md << 'EOF'
# JMeter API

This project provides a Spring Boot API to create and run JMeter load tests. The API allows you to create load tests using REST endpoints and execute them with JMeter within a Docker container.

## Prerequisites

- Docker
- curl (for testing)

## Setup Instructions

1. Clone this repository
2. Run the setup script: `./build.sh`
3. The API will be available at: http://localhost:8080

## API Endpoints

### Create and Run Load Test

```
POST /api/loadtest
```

Example request:

```bash
./test-endpoint.sh
```

### Get Load Test Results

```
GET /api/loadtest?testName=<test_name>
```

Example:

```bash
curl -X GET "http://localhost:8080/api/loadtest?testName=Get%20Organization%20Test%20-%20Final%20Fix"
```

## Running JMeter Tests Directly

You can also run JMeter tests directly using the provided script:

```bash
./run-jmeter.sh /jmeter/tests/<test_file>.jmx /jmeter/results/<results_file>.jtl [threads] [ramp_up] [loop_count]
```

## Directories

- `jmeter-tests`: Contains generated JMX files
- `jmeter-results`: Contains test results

## License

This project is licensed under the MIT License.
EOF

echo -e "${GREEN}Created README.md${NC}"

# Create gitignore
cat > .gitignore << 'EOF'
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

### JMeter ###
jmeter-tests/*
jmeter-results/*
!jmeter-tests/.gitkeep
!jmeter-results/.gitkeep
EOF

# Create .gitkeep files to preserve directory structure
touch jmeter-tests/.gitkeep
touch jmeter-results/.gitkeep

echo -e "${GREEN}Created .gitignore and directory placeholders${NC}"

# Print usage instructions
echo
echo -e "${YELLOW}Project setup complete!${NC}"
echo
echo -e "${GREEN}To build and run the Docker container:${NC}"
echo "cd $PROJECT_NAME"
echo "./build.sh"
echo
echo -e "${GREEN}To test the API endpoint:${NC}"
echo "./test-endpoint.sh"
echo
echo -e "${GREEN}To retrieve test results:${NC}"
echo "curl -X GET \"http://localhost:8080/api/loadtest?testName=Get%20Organization%20Test%20-%20Final%20Fix\""
echo
echo -e "${GREEN}To directly run a JMeter test file:${NC}"
echo "./run-jmeter.sh /jmeter/tests/<test_file>.jmx /jmeter/results/<results_file>.jtl [threads] [ramp_up] [loop_count]"
